module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare; 
  multiplier multiplier;
  
  always {
    shifter.alufn_signal = 0;
    compare.z = 0;
    compare.v = 0;
    compare.n = 0;
    compare.alufn_signal = 0;
    multiplier.a = a;
    multiplier.b = b;
    
    // YOUR ANSWER HERE // alu.luc body
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    z = adder.z;
    v = adder.v;
    n = adder.n;
    out = adder.out;
    compare.z = adder.z;
    compare.v = adder.v; 
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    out = compare.cmp;
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    
    out = boolean.bool;
    shifter.a = a;
    shifter.b = b[4:0];
    shifter.alufn_signal = alufn_signal;
    out = shifter.shift; 
    case(alufn_signal[5:4]){
      b00:
        
        case(alufn_signal[1]){
         b0:
          out = adder.out;
          b1:
          out = multiplier.mul;
        }
        
      b01:
        out = boolean.bool;
      b10:
        out = shifter.shift;
      b11:
        out = compare.cmp;
      
      default:
        out = 16b0;
  }
    
    if (alufn_signal == 6b010101){
      out = ^a; // custom functionality, reduction xor
    }
}
